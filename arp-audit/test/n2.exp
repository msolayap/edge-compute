


proc whereami {} {

	puts $::tcl_platform(os)
	puts $::env(HOME)
}

proc testproc {code }  {

	return -code $code  "Connection Refused" ;

}

whereami 

set arp_entry [dict create  a 1 b 2 c 3 d 4 e 5 ]

if { [catch {testproc error } err] } { 

	puts "error occured: $err" ;
	puts $errorInfo ;

} 

puts "next line of code here" ;

set mlist { z x y w  u v t s}

foreach e [dict keys $arp_entry] {
	puts "k -> $e" ;
	lappend mlist $e 
}

puts $mlist 
puts [llength $$mlist]
puts [lindex $mlist 4]
puts [lrange $mlist 4 7 ]


namespace eval Juniper {
	variable get_arp_entry 5 

	proc set_new_arp {} {
		puts "set new arp success";
	}
}

set Juniper::get_arp_entry  1

puts "$Juniper::get_arp_entry" ;

Juniper::set_new_arp
set devicetype "Juniper"


append call  $devicetype {::} {set_new_arp} ;

puts $call

$call 

puts [namespace children]

foreach {k v} [array get tcl_platform]  {
	puts "$k -> $tcl_platform($k)" ;
}


set mynum  "YES" 

puts [string is boolean -strict  $mynum]
puts [string is true  $mynum]

puts $env(HOME)














