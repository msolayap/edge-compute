

package require Itcl ;

set _class_name "Juniper" ;

if { $_class_name in [itcl::find classes] } {
# class loaded already
# 	puts "class  |$_class_name| loaded already" ;
	return 0;
}

itcl::class $_class_name {


	common vendor "Juniper" ;
	protected variable prompt "(%|#|\\\$|>) *$" ;

 	public variable device "none" ;
	public variable login_success
	public variable active_spawn_id;


	protected variable cmd_context "none" ;
	public    variable all_arp_output {}

	public variable all_arp_dict {}
	public variable conn_agg_prefix "ae" ;
	public variable cmd_queue {}

	public variable init_change_cmds [list "configure private"] ;
	public variable commit_change_cmds [list "show | compare" "commit check"  "commit and-quit"];

# Device specific commands
	protected variable arp_get_cmd "show arp no-resolve" ;
	protected variable init_term_cmds [list "set cli screen-length 0" ];
	protected variable device_exit_cmd "exit" ;

	constructor {dev} {
		set login_success 0 
		set device  $dev;

#		lputs "Creating object for $vendor device: $device" ;
# Initialize/Overwrite some context global variable for device interaction.
		global send_human send_slow timeout

		set send_human {.1 .3 1 .05 2}
		set send_slow {2 .001}
		set timeout  30
	}

	destructor  {
	#	lputs "Deleting Object for $vendor device: $device" ;
	}

# Terminal initializations before detecting the device vendor. This is to avoid any errors during vendor detection.
# Respective device class will have its own overriden function with same signature.
	method init_terminal {} {
		global mock_run

		if { $mock_run } {
			return 0;
		}

		set myclass [$this info class]

		set spawn_id $active_spawn_id 

		foreach cmd $init_term_cmds {
			if { [catch {send -h "$cmd\r" } err] } {
				lputs "$myclass: Initializing terminal failed with error: $err" ;
				return 1;
			} 
		}
		return 0;
	}

	method login {user password} {

		global mock_run mock_data device_auth

		if { $mock_run } {
			lputs "mock login to $device successful" ;
			return 1;
		}

		set login_success 0;
		global R_CMD 

		if { $device_auth } {
			set logincmd "ssh $user@$device" ;
		} else {
			set logincmd "$R_CMD $device" ;
		}

		lputs "Login to device by $logincmd" ;

		if { [catch {eval spawn $logincmd } err ]} {
			lputs "ERROR: Failed to login to device\nError: $err" 
			return 0;
		} 

		expect {
			-re "assword: *$" {
				send "$password\r" ;
				exp_continue ;
			}
			-re $prompt {
				lputs "login ok";
				set active_spawn_id  $spawn_id 
				set login_success 1
			}
		}
		if { $login_success } {
			lputs "** Login Successful **" ;
			return 1;
		} else {
			lputs "** Login Failed **" "WARN"
			return 0;
		}
	}

	method logout {} { 

		global mock_run 

		if { $mock_run } {
			lputs "mock logout of  $device successful" ;
			return 1;
		}

		set spawn_id $active_spawn_id 
		set myclass [$this info class]

		lputs "Exiting device: $device" ;

		if { [catch {send -h "$device_exit_cmd\r"} err] } {
			lputs "$myclass:$device - Initializing terminal failed with error: $err" ;
			return 0;
		} 

		return 1;
	}


	method get_set_arp_cmd {interface ip mac} {

		global mock_run

		if { $mock_run } {
			set set_cmd "set interfaces ae3 unit 3501 family inet address 10.69.172.2/30 " ;
			append set_cmd " arp $ip mac $mac ";
			return $set_cmd
		}

		set _method_name [lindex [info level 1 ] 0 ]

		set set_arp_cmd_prfx [format {show configuration interfaces %s | display set | match "address [0-9]{1,3}\."} $interface] ;

		set timeout 5 ;
		set got_cmd 0;
		set set_cmd "" ;
		set cmd_context "show_config_interfaces" ;
		set spawn_id $active_spawn_id 
#clear the buffer
		expect -glob "*" ;
		send -s  "\r" ;
		expect {
			-re $prompt {
				if {$got_cmd == 0} {
					send "$set_arp_cmd_prfx\r" ;
					lputs "sent command: /$set_arp_cmd_prfx/" ;
					expect {
						-re "set interfaces \[^\n]+\n" {
							set set_cmd [string map { "\r" "" } $expect_out(0,string)];
							set whole_output [string map { "\r" "" } $expect_out(buffer)]
							lputs "whole output:\n$whole_output" ;
							set got_cmd 1;
						}
						timeout {
							lputs "timed out - ctxt - $_method_name : $cmd_context" ;
						}
						eof {
							lputs "EOF occured - ctxt - $_method_name : $cmd_context" ;
						}
						default {
							dputs [string map { "\r" "" } $expect_out(buffer)] ;
						}
					}
				}
			}
			eof {}
			timeout {}
		}
		if { $got_cmd } {
			set set_cmd [string trim $set_cmd] ;
			regsub -all -line {arp.*$} $set_cmd {} set_cmd
			append set_cmd " arp $ip mac $mac ";
		} else {
			lputs "Could not obtain - set interface cmd prefix" "WARN"
		}

		return $set_cmd ;
	}

	method prepare_set_arp_cmd_sync { arp_entries_list } {
		return [prepare_set_arp_cmd $arp_entries_list ]
	}

	method prepare_set_arp_cmd {arp_entries_list } {
		set _method_name [lindex [info level 1 ] 0 ]

		set set_arp_cmd ""
		set commit_cmd "commit check" ;

		lputs "preparing set arp commands for device : $device " ;

		set ac 0 
		foreach arp_entry $arp_entries_list  {
			dict with arp_entry {
				set set_arp_cmd [get_set_arp_cmd $iface $address $mac] ;
			}
			lputs "received set cmd: $set_arp_cmd" ;
			unset -nocomplain iface address mac

			lappend cmd_queue $set_arp_cmd 
			incr ac 1
			set set_arp_cmd ""
		}
# Add Commit statements here
		if  { $ac > 0 } {
#			lappend cmd_queue $commit_cmd ;
			lputs [format "%d set arp commands prepared" $ac]
		} else {
			lputs "No commands prepared." ;
		}

		return $ac
	}


	method get_arp_entries { {conn_agg_id ""} } {

		global mock_run mock_data

		if { $mock_run } {
			lputs "returning mock arp output for $device" ;
			set all_arp_output $mock_data($device); 
			set all_arp_dict [parse_arp_entries [split $all_arp_output "\n"]] ;
			#dputs "dict after parsing ...." ;
			#dputs $all_arp_dict ;
			return $all_arp_dict ;
		}

		set _method_name [lindex [info level 1 ] 0 ]

		set myclass [$this info class];

		lputs "fetching arp entries from $device"

		set arp_read_completed 0
		set total_arp_found  0
		set all_arp_output {} ;
		set all_arp_dict {}
		set cmd_queue {} ;
		set arp_filter {};
		set showarp $arp_get_cmd


		if { [regexp "^.+$" $conn_agg_id] } {
			set arp_filter [format "\"%s%s\[^0-9]\"" $conn_agg_prefix $conn_agg_id]
			lputs "applying arp_filter $arp_filter"
			append showarp " | match $arp_filter" ;
		}

		set cmd_context "get arp" ;
		set spawn_id $active_spawn_id 
		send -s  "\r" ;
		expect {
			-re $prompt {
				if {$arp_read_completed == 0} {
					send "$showarp\r" ;
					lputs "sent command: /$showarp/" ;
					sleep 0.1
					expect {
						-re $prompt {
							append all_arp_output $expect_out(buffer);
							lputs "ARP read complete";
							set arp_read_completed 1 ;
						}
						default  { 
							append all_arp_output $expect_out(buffer);
							exp_continue ;
						}
						timeout {
							lputs "timed out - ctxt - $_method_name : $cmd_context" ;
						}
						eof {
							lputs "EOF occured - ctxt - $_method_name : $cmd_context" ;
						}

					}
			   } 
			}
		}
# convert all arp lines to dictionary structure for easy ocessing.
		set all_arp_dict [parse_arp_entries [split $all_arp_output "\n"]] ;
		foreach adict $all_arp_dict {
			dict for {k v} $adict  {

				dputs "$k ---> $v" ;
			}
		}
		wait_for_key ;
		
		return $all_arp_dict ;

	}

	proc is_arp_line_valid {arp_line} {
		set is_valid 1;

		eval set arp_line_fields [list $arp_line ]
		set field_count [llength $arp_line_fields] ;

# Empty line check and check it contains all the fields i.e IP MAC EXPIRY Type, Interface
# sometimes MAC may be missing. This check is for that.
#		if { [regexp "^$" $arp_line] || $field_count < 5 } { }
		if { [regexp "^$" $arp_line] || $field_count < 4 } { 
			set is_valid 0 ;

		} elseif { ! [regexp  "^(\[0-9A-Za-z]{2}\:){5}" [lindex $arp_line_fields 0] ] } {
# is the line starting with valid IP address
			set is_valid 0;
		}

		return $is_valid 
	}

	method parse_arp_entries {arp_entries_list}  {

		set arp_entries_dict {}

#normalize arp output to a list, so each line 
		foreach line $arp_entries_list {

			set line [string trim $line];


# Filter ARP output only for arp lines - leaving column header, footer, line, etc.,	
			set line_valid  [is_arp_line_valid $line] ;

			if {! $line_valid  } {
				dputs $line ;
				dputs "not valid arp entry"
				continue ;
			}

			set arp_entry "" ;

			#if { [ regexp "^(.+?)\[ ]+(.+?)\[ ]+(.+?)\[ ]+(.+?)\[ ]+(.+?)$" $line dummy mac address name iface flags] } { }
			if { [ regexp "^(.+?)\[ ]+(.+?)\[ ]+(.+?)\[ ]+(.+?)$" $line dummy mac address iface flags] } { 
				dputs $line ;
				dputs "valid arp entry" ;
# Create a temporary dictionary with field values scanned by regexp
				#set arp_entry [dict create mac $mac address $address name $name iface $iface flags $flags]
				set arp_entry [dict create mac $mac address $address iface $iface flags $flags]

				if { [regexp "^(.*?)\\.(.*?)$" [dict get $arp_entry iface] dummy ifaceb4vlan vlan] } {
					set iface_only $ifaceb4vlan
					set vlan $vlan
				} else {
					set iface_only ""
					set vlan ""
				}

				set arp_entry [dict set arp_entry iface_only $iface_only] ;
				set arp_entry [dict set arp_entry vlan $vlan ];

# Append the ARP entry dict to a master list.
				lappend arp_entries_dict $arp_entry 
			} else {
				dputs "regexp match failed. not valid arp entry" ;
				continue ;
			}

		}
		return $arp_entries_dict ;
	}

	method convert_dynamic_arp_to_static { {conn_agg_id ""} } {

		set arps_as_dict [get_arp_entries $conn_agg_id ]

		init_terminal

		set non_static_arp_dict [filter_dynamic_arps $arps_as_dict] ;

		lputs "Found [llength $non_static_arp_dict] Dynamic entries out of Total [llength $arps_as_dict] ARP entries" ;

		set set_arp_cmd_list [prepare_set_arp_cmd $non_static_arp_dict]

		return $set_arp_cmd_list ;
	}


	method filter_dynamic_arps {all_arps} {

		set dynamic_arp_dict {} ;
# Filter Dynamic ARP entries by Type field
		foreach entry $all_arps {
			if { ! [regexp -nocase "permanent" [dict get $entry flags] ] } {
				lappend dynamic_arp_dict $entry 
			}
		}
		return $dynamic_arp_dict ;
	}

	method exec_cmd_in_device {cmd}  {
		set _method_name [lindex [info level 1 ] 0 ]
		lputs "$_method_name not implmented yet" ;
	}

	method ping_target {target params} {
		set _method_name [lindex [info level 1 ] 0 ]
		lputs "$_method_name not implmented yet" ;
	}

	method get_prepared_commands {} {
		
		return $cmd_queue ;
	}

}


