

# File to hold utility procedures

# proc to provide basic info about current execution environment

proc wait_for_key {} {
	global envi ;
	if { ! [regexp -nocase "prod" $envi]  } {
		dputs "Press ENTER to continue ... " ;
		gets stdin ;
	}
}

proc script_host_info {}  {
	global tcl_platform 
	set msg {} ;
	append msg "hostname: [exec hostname] ; OS: $tcl_platform(os)-$tcl_platform(machine) ; user: $tcl_platform(user) ; cwd: [pwd]" ;

	return $msg
}
# Returns a banner line
proc banner_line {} {
	return [string repeat "-" 80] 
}

# Debug print function. Prints only when DEBUG is set.
proc dputs { line } {
	global DEBUG ;

	if {[is_true $DEBUG]} {
		puts stderr $line ;
	}
}
# proc to log msg at given level
proc get_date {} {
	global log_datefmt date_locale

	set ctime [clock format [clock seconds] -format $log_datefmt -locale $date_locale]

	return $ctime
}

proc is_true {var} {
	if { [string is true $var] } { return 1 }  else { return 0 } ;
}

proc is_false {var} {
	if { [string is false $var] } { return 1 }  else { return 0 } ;
}

proc open_logfile {} {

	global logfile_ready logfile logfh basedir

	set logdir "$basedir/log" ;

	if { 0==[file isdirectory $logdir] } {
		set res [catch [file mkdir "$logdir"] err]
	}

	if { [ catch {set logfh [open "$logdir/$logfile" "a"]} err ] } {
		dputs "Cannot open logfile $logfile. Error: $err" ;
		set logfile_ready 0 ;
		return 1;
	} else {
		set logfile_ready 1 ;
		return 0 ;
	}
}

proc lputs {msg {level {INFO}} } {
	global app_tag logfh logfile_ready logging ;

	set msg [string trimright $msg] ;

	set log_line "" ;
	set log_fmt "%s %s %s %s" ;
	set log_line  [format $log_fmt [get_date] $app_tag $level $msg] ;

	dputs $log_line ;

	if { [is_true $logging] &&  [is_true $logfile_ready] } {
		puts $logfh $log_line ;
	}
}

proc send_syslog {msg {level {info}} } {
	global app_tag log_syslog syslog_ready logger_util 

	if { [is_true $log_syslog] && [is_true $syslog_ready] } {
		set ret [exec $logger_util -p user.$level -t $app_tag $msg]
	}
}
# proc to check logger utility's precense in the system and enable syslog.
proc enable_syslog {} {
	global log_syslog syslog_ready logger_util ;

	if { [is_false $syslog_ready] } {

		if { 0==[catch {exec which logger} err]  } {
			lputs "activating syslog. using $err" ;
			set logger_util $err
			set syslog_ready 1
		} else {
			lputs "cannot send messages to syslog: error: $err" ;
			set syslog_ready 0 ;
		}
	}
}


# proc to enable DEBUG
proc debug_on {} {
	uplevel {
		set DEBUG 1
	}
}

# proc to disable DEBUG
proc debug_off {} {
	uplevel {
		set DEBUG 0
	}
}

# proc to print the given message and terminate the program
proc error_exit {code msg}  {
	dputs $msg ;
	exit $code ;
}

######

proc init_mop {mop_file_name} {

	global mopfh ;
	set fh -1

	if { [catch {set fh [open $mop_file_name "w"]} err]  }  {
		lputs "Error opening MOP file for writing. $err "
	} else {
		set mopfh  $fh ;
		lputs "MOP file opened for writing: $mop_file_name"
	}
}

proc add_mop {cmd_list} {

	global mopfh 

	foreach line $cmd_list {
		puts $mopfh "$line" ;
	}
}

proc close_mop {} {

	global mopfh 

	close $mopfh
}

proc get_device_list {} {

# defined in config
	global devices_list_file basedir fetch_site_data_from_api ;

	set LS "\n";
	set FS "," ;

	if { [is_true $fetch_site_data_from_api] }  {
		lputs "Fetching SITE data from Houdini API service" ;
		if { [catch {exec ./api_to_csv.sh } err] } {
			lputs "Error while contact Houdini API. Error: $err" "WARN"; 
		}
	}
	
	set device_list {}

	if { [catch {set dfh [open $devices_list_file "r"] } err] } {
		lputs "cannot open file $devices_list_file. Error: $err" "ERROR" ;
		return -code error "cannot open file: $devices_list_file"
	} else {
# read and close the file 
		set content [read $dfh];
		close $dfh ;

		set header_line 1;
		set rownum 1;
		set invalid_row 0 ;

		foreach record [split $content "$LS"] {
#skip empty lines
			if { [regexp "^$"  $record] } {  continue ; }
#for safer side skip any space/newline chars at end.
			set record [string trimright $record] ;
#take column names from the first line of the content.
			if { $header_line }  { 
				set colnames [split $record "$FS"] ;
				set header_line 0 ;  
				continue ; 
			}

			set colvalues [split $record "$FS"] ;
			set siterecord {}
# take necessary fields based on index.

			foreach fi {0 1 2 3 4} {
# if any of the column is empty, skip the row.
				if { [ regexp "^$" $fi ] } {
					lputs "one or more mandatory columns missing at : $rownum. skipping to next record" "WARN"
					lputs $record ;
					set invalid_row 1
					incr rownum 1 ;
					break ;
				}
				dict set siterecord [lindex $colnames $fi] [lindex $colvalues $fi] ;
			}

			if { $invalid_row } {
				set invalid_row 0
				continue ;
			}

			lappend device_list $siterecord;
		}
	}
	return $device_list ;
}

# Load methods for given device model
proc load_methods_for {vendor} {
	set dtype [string totitle $vendor] ;
	set device_namespace "::";
# Load appropriate methods for detected device model
	switch -exact -nocase $dtype {
		"Juniper" -
		"Nokia" {
			append device_namespace $dtype {::*}
			lputs "Importing methods for $device_namespace" ;
			if { [catch {namespace import -force  $device_namespace} err] } {
				lputs "loading namespace $device_namespace failed. Error: $err" "ERROR" 
				return 1
			}
		}
		default {
			error_exit 1 "unsupported device type: $dtype" ;
		}
	}
}
