
set warn_msg "WARN: This is just stub for %s. override this in respective device class."


proc init_vars {} {
	uplevel {
		set prompt "(%|#|\\\$|>) *$"
		set send_human {.1 .3 1 .05 2}
		set send_slow {2 .001}
		# specific to this piece
		set vendor_detected 0
		set device_vendor "unknown"
		log_user 0 
	}
}

proc login_to_device {hostname user password} {

	global login_success prompt current_device ;

	lputs "Login to device $user@$hostname" ;

	if {[catch {spawn ssh $user@$hostname} err ]} {
		lputs "ERROR: Failed to login to device\nError: $err" 
		return 1;
	} 
# We will leave the session open for further functions to interact
	uplevel set spawn_id $spawn_id 
	set login_success 1

	dict set current_device device $hostname

	expect {
		-re "assword: *$" {
			send "$password\r" ;
			exp_continue ;
		}
		-re $prompt {}
	}
	lputs "** Login Successful **" ;
	return 0;
}

# Terminal initializations before detecting the device vendor. This is to avoid any errors during vendor detection.
# Respective device class will have its own overriden function with same signature.
proc init_terminal {} {
	global prompt
	send -h "\r" ;

#	expect {
#		-re $prompt {
### For Juniper
#			send "set cli screen-length 0\r" ;
#			sleep 1;
### For Nokia
#			send "environment no more\r" ;
#		}
#	}
	return 0;
}

proc detect_device_vendor {} {

	global vendor_detected prompt current_device ;

	set d_vendor "unknown" ;
	set vendor_detected 0 ;

	send -s  "\r" ;
	expect {
		-re $prompt {
			if {$vendor_detected == 0} {
				send "show version\r" ;
				expect {
					-re "(ptx1000|JUNOS)" {
						set d_vendor "Juniper"
# Juniper shows lot of version information. sometimes with pager (more), hence its important to come back to terminal prompt.
# sending q  will quit the pager.
						send -h "q" ;
					}
					-re "(Nokia)" {
						set d_vendor "Nokia"
						expect -re $prompt {}
					}

				}
				incr vendor_detected 1 
			}
		}
	}
	lputs "Detected vendor of device: [dict get $current_device device] as VENDOR: $d_vendor" ;

	dict set $current_device vendor $d_vendor ;
	return $d_vendor ;
}

proc get_arp_entries { {arp_filter ""} } {
	global warn_msg ;

	set _proc_name [lindex [info level 1 ] 0 ]
	dputs [format $warn_msg $_proc_name ]

}

proc parse_arp_entry {}  {
	global warn_msg ;

	set _proc_name [lindex [info level 1 ] 0 ]
	dputs [format $warn_msg $_proc_name ]
}

proc prepare_set_arp_cmd {params} {
	global warn_msg ;

	set _proc_name [lindex [info level 1 ] 0 ]
	dputs [format $warn_msg $_proc_name ]

}

proc ping_target {target params} {

	global warn_msg ;

	set _proc_name [lindex [info level 1 ] 0 ]
	dputs [format $warn_msg $_proc_name ]
}

proc device_logout {} { 
	global warn_msg ;

	set _proc_name [lindex [info level 1 ] 0 ]
	dputs [format $warn_msg $_proc_name ]
}
