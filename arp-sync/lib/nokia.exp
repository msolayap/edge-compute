

# Device specific functions to override base procs - polymorphism
# Device Vendor: Juniper

namespace eval Nokia {

	namespace export \
		login_to_device \
		init_vars \
		init_terminal \
		detect_vendor \
		get_arp_entries \
		parse_arp_entry \
		prepare_set_arp_cmd \
		ping_target \
		device_logout 

	proc init_vars {} {
		uplevel {
			set prompt "(%|#|\\\$|>) *$"
			set send_human {.1 .3 1 .05 2}
			set send_slow {2 .001}
			# specific to this piece
			set vendor_detected 0
			set device_vendor "unknown"
			log_user 0 
		}
	}

	proc login_to_device {hostname user password} {

		global login_success prompt

		if {[catch {spawn ssh $user@$hostname} err ]} {
			puts stderr "ERROR: Failed to login to device\nError: $err" 
			return 1;
		} 
# We will leave the session open for further functions to interact
		uplevel set spawn_id $spawn_id 
		set login_success 1

		expect {
			-re "assword:\s*$" {
				send "$password\r" ;
				exp_continue ;
			}
			-re $prompt {
				send "set cli screen-length 0\r" ;
			}
		}
		return 0;
	}

	proc init_terminal {} {
		global prompt
		send -h "\r" ;
		expect {
			-re $prompt {
				send "set cli screen-length 0\r" ;
			}
		}
		return 0;
	}

	proc detect_vendor {} {

		global vendor_detected device_vendor prompt device_vendor

		send -s  "\r" ;
		expect {
			-re $prompt {
				if {$vendor_detected == 0} {
					send "show version\r" ;
					expect {
						-re $prompt {}
						-re "(ptx1000|JUNOS)" {
							set device_vendor "juniper"
						}
						-re "(Nokia)" {
							set device_vendor "nokia"
						}
						-re "\(more\)" {
							send -s  "\r" ;
							exp_continue ;
						}

					}
					incr vendor_detected 1 
				}
			}
		}
		return $device_vendor 
	}

	proc get_arp_entries { {arp_filter ""} } {
		global warn_msg ;

		set _proc_name [lindex [info level 1 ] 0 ]
		dputs [format $warn_msg $_proc_name ]

	}

	proc parse_arp_entry {}  {
		puts "This is from Juniper";
	}

	proc prepare_set_arp_cmd {params} {
		global warn_msg ;

		set _proc_name [lindex [info level 1 ] 0 ]
		dputs [format $warn_msg $_proc_name ]

	}

	proc ping_target {target params} {

		global warn_msg ;

		set _proc_name [lindex [info level 1 ] 0 ]
		dputs [format $warn_msg $_proc_name ]
	}

	proc device_logout {} { 
		global warn_msg ;

		set _proc_name [lindex [info level 1 ] 0 ]
		dputs [format $warn_msg $_proc_name ]
	}
}
