#!/usr/bin/expect

log_user 1

source ../config.exp

source ../lib/util.exp
source ../lib/base.exp
source ../lib/juniper.exp
source ../lib/nokia.exp

# code to initialize logging and syslog
open_logfile ;

lputs [banner_line];
lputs "Starting arp sync activity" ;
lputs [script_host_info]
enable_syslog ;
lputs [banner_line];

# sample codes
#send_syslog "This is sample log line" "crit" ;
#error_exit 1 "Error occured" 

# Initialize variables necessary for device interaction.
init_vars; 
set user   "rancid" 
set pass   "level3" 

global current_device ;

set current_device {} ;

#### Start of arp_sync code ############

set devices_array [get_device_list $devices_list_file]

## loop through this foreach and do processing. 
set rownum 1;
set invalid_row 0 ;

foreach dev_record $devices_array {
	set name  [dict get $dev_record "name"]  ;
	set device_1 [dict get $dev_record "ear_1_router_hostname"]  ;
	set device_2 [dict get $dev_record "ear_2_router_hostname"]  ;

# if SITENAME, device1 or device2 is empty there is no point in proceeding further. lets skip it.
# TODO: There is one use case - just to convert arp entries to static in one device.

	set mandatory_fields [list $name $device_1 $device_2]

	set res [lsearch -regexp $mandatory_fields "^$"]  ;
	if { $res!=-1  } {
		lputs "device records invalid at row: $rownum. skipping to next record" "ERROR"
		lputs $dev_record
		set invalid_row 1
	}
 # Increment row number for tracking.
	incr rownum 1

	if { [is_true $invalid_row] } {
		set invalid_row 0
		continue ;
	}

	set device $device_1 ;

# Login to device
	login_to_device $device $user $pass

# To avoid page number

	init_terminal ;

# detect device vendor using /show version/ command.
	set vendor [detect_device_vendor] ;

# Load methods for appropriate device model
	load_methods_for $vendor ;

#Initialize device model specific parameters before interaction	
	init_terminal ;

	init_mop [format "MOP_%s.txt" $vendor]  ;

	set mop_stmt_list [convert_dynamic_arp_to_static]

	add_mop $mop_stmt_list

	device_logout ;

}


